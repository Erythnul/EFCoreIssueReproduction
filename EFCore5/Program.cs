using AutoMapper;
using AutoMapper.QueryableExtensions;
using EfCoreRepro.DTOs;
using EfCoreRepro.DTOs.MapperProfile;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Repository;
using System;
using System.Linq;

namespace EfCoreRepro
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            var serviceProvider = SetupDepencyInjection();

            using var scope = serviceProvider.GetRequiredService<IServiceScopeFactory>().CreateScope();
            using var ctx = scope.ServiceProvider.GetRequiredService<NoCompositeKeyContext>();
            var mapper = scope.ServiceProvider.GetRequiredService<IMapper>();

            //None of these below work:
            var orderQuery = mapper.ProjectTo<OrderModel>(ctx.Orders);
            var test0 = orderQuery.ToList();

            //As generated by AutoMapper with usual null checks not disabled (default behaviour)
            var ordersWithNormalNullChecks = ctx.Orders.Select(dtoOrder => new OrderModel
            {
                ShippingAddress = (((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null) == null)
                    ? null
                    : new AddressModel
                    {
                        City = ((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null).City,
                        Country = ((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null).Country,
                        HouseNumber = ((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null).HouseNumber,
                        Street = ((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null).Street
                    }
            });
            var test1 = ordersWithNormalNullChecks.ToList();

            //As generated by AutoMapper with usual null checks disabled
            var ordersWithLessNullChecks = ctx.Orders.Select(dtoOrder => new OrderModel
            {
                ShippingAddress = new AddressModel
                {
                    City = ((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null).City,
                    HouseNumber = ((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null).HouseNumber,
                    Street = ((dtoOrder.ShippingAddress.Country != null) ? dtoOrder.ShippingAddress : null).Street
                }
            });
            var test2 = ordersWithLessNullChecks.ToList();
        }

        private static ServiceProvider SetupDepencyInjection()
        {
            var services = new ServiceCollection()
                            .AddDbContext<NoCompositeKeyContext>();

            services.AddSingleton<IMapper>(provider =>
            {
                var config = new MapperConfiguration(cfg =>
                {
                    cfg.AddProfile<OrderProfile>();
                });
                config.AssertConfigurationIsValid();

                return new Mapper(config);
            });

            return services.BuildServiceProvider();
        }
    }
}
