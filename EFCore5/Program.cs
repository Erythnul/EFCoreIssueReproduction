using AutoMapper;
using AutoMapper.QueryableExtensions;
using EfCoreRepro.DTOs;
using EfCoreRepro.DTOs.MapperProfile;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using RepositoryWithCompositeKeys;
using RepositoryWithNoCompositeKeys;
using System;
using System.Linq;
using System.Security.Cryptography.X509Certificates;

namespace EfCoreRepro
{
    class Program
    {
        private static Guid orderId = Guid.Parse("00000000-0000-0000-0000-000000000001");

        static void Main(string[] args)
        {
            var serviceProvider = SetupDepencyInjection();

            using var scope = serviceProvider.GetRequiredService<IServiceScopeFactory>().CreateScope();
            using var noCompositeKeyContext = scope.ServiceProvider.GetService<NoCompositeKeyContext>();
            var mapper = scope.ServiceProvider.GetService<IMapper>();

            var noCompKeyQuery = noCompositeKeyContext.Orders.AsNoTracking().Where(x => x.Id == orderId);
            var noCompKeyProjectedQuery = noCompKeyQuery.ProjectTo<OrderModel>(mapper.ConfigurationProvider);
            var noCompKeyResult = noCompKeyProjectedQuery.ToList();

            //This is the LINQ generated by AutoMapper
            var queryAsExpressionNoComp = noCompositeKeyContext.Orders.AsNoTracking()
                .Where(x => x.Id == Program.orderId)
                .Select(
                    dtoOrder => new
                    {
                        __MostImportantOrderLine = dtoOrder.OrderLines.FirstOrDefault(x => ((int?)x.OrderLineNumber) == dtoOrder.MostImportantOrderLine),
                        Id = dtoOrder.Id
                    })
                .Select(
                    dtoLet => new OrderModel
                    {
                        MostImportantOrderLine = (dtoLet.__MostImportantOrderLine == null)
                            ? null
                            : new OrderLineModel
                            {
                                Description = dtoLet.__MostImportantOrderLine.Description,
                                OrderLineId = dtoLet.__MostImportantOrderLine.Id
                            },
                        OrderId = (Guid?)dtoLet.Id
                    });
            var queryAsExpressionResultNoComp = queryAsExpressionNoComp.ToList();

            foreach (var item in noCompKeyResult)
            {
                Console.WriteLine($"{item.MostImportantOrderLine.Description} found, query executed successfully for {nameof(noCompositeKeyContext)}");
            }

            using var compositeKeyContext = scope.ServiceProvider.GetService<CompositeKeyContext>();
            var compKeyQuery = compositeKeyContext.Orders.AsNoTracking().Where(x => x.Id == orderId);

            var compKeyProjectedQuery = compKeyQuery.ProjectTo<OrderModel>(mapper.ConfigurationProvider);
            var compKeyResult = compKeyProjectedQuery.ToList();

            //This is the LINQ generated by AutoMapper, same LINQ as above
            var queryAsExpression = compositeKeyContext.Orders.AsNoTracking()
                .Where(x => x.Id == Program.orderId)
                .Select(
                    dtoOrder => new
                    {
                        __MostImportantOrderLine = dtoOrder.OrderLines.FirstOrDefault(x => ((int?)x.OrderLineNumber) == dtoOrder.MostImportantOrderLine),
                        Id = dtoOrder.Id
                    })
                .Select(
                    dtoLet => new OrderModel
                    {
                        MostImportantOrderLine = (dtoLet.__MostImportantOrderLine == null)
                            ? null
                            : new OrderLineModel
                            {
                                Description = dtoLet.__MostImportantOrderLine.Description,
                                OrderLineId = dtoLet.__MostImportantOrderLine.Id
                            },
                        OrderId = (Guid?)dtoLet.Id
                    });

            foreach (var item in noCompKeyResult)
            {
                Console.WriteLine($"{item.MostImportantOrderLine.Description} found, query executed successfully for {nameof(compositeKeyContext)}");
            }
        }

        private static ServiceProvider SetupDepencyInjection()
        {
            var services = new ServiceCollection()
                            .AddDbContext<CompositeKeyContext>()
                            .AddDbContext<NoCompositeKeyContext>();

            services.AddSingleton<IMapper>(provider =>
            {
                var config = new MapperConfiguration(cfg =>
                {
                    cfg.AddProfile<OrderProfile>();
                });
                config.AssertConfigurationIsValid();

                return new Mapper(config);
            });

            var serviceProvider = services.BuildServiceProvider();

            MigrateDatabase(serviceProvider);
            return serviceProvider;
        }

        private static void MigrateDatabase(ServiceProvider serviceProvider)
        {
            using var scope = serviceProvider.GetRequiredService<IServiceScopeFactory>().CreateScope();
            using var context = scope.ServiceProvider.GetService<CompositeKeyContext>();

            context.Database.Migrate();
        }
    }
}
